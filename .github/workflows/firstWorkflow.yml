name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  workflow_dispatch:

jobs:
  unit-tests-backend:
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.test-backend.outputs.report }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up go
        uses: actions/setup-go@v4
        with: 
          go-version: "1.21"
          cache-dependency-path: bugtracker-backend/go.sum

      - name: Install go junit
        run: go install github.com/jstemmer/go-junit-report/v2@latest
          
      - name: Execute Backend tests
        id: test-backend
        working-directory: ./bugtracker-backend
        run: |
          go test -json -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out > coverage.txt

          echo "## Go Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          cat coverage.txt >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          
          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat coverage.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          
          go test -v ./... 2>&1 | go-junit-report > test-results.xml
      
      
      - name: Publish Backend tests
        uses: dorny/test-reporter@v1
        if: always()
        with:
         name: Backend unit tests report
         path: bugtracker-backend/test-results.xml
         reporter: jest-junit

  unit-tests-frontend:
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.test-frontend.outputs.report }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up node
        uses: actions/setup-node@v4
        with: 
          node-version: "20"
          cache: "npm"
          cache-dependency-path: bugtracker-frontend/package-lock.json
      
      - name: Execute Frontend tests
        id: test-frontend
        working-directory: ./bugtracker-frontend
        run: |
          npm ci
          npm test | tee full_output.txt

          echo "## Frontend Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          cat full_output.txt >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat full_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Publish Frontend tests
        uses: dorny/test-reporter@v1
        if: always()
        with:
         name: Frontend unit tests report
         path: bugtracker-frontend/test-results.xml
         reporter: jest-junit
  
  create-coverage-comment:
    if: github.event_name == 'pull_request'
    needs: [unit-tests-backend, unit-tests-frontend]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
     - name: Create Backend Coverage comment
       uses: peter-evans/create-or-update-comment@v4
       with: 
         issue-number: ${{ github.event.pull_request.number}}
         body: |
           ## Backend Test Coverage Report
           ```
           ${{ needs.unit-tests-backend.outputs.coverage }}
           ```

     - name: Create Frontend Coverage comment
       uses: peter-evans/create-or-update-comment@v4
       with: 
         issue-number: ${{ github.event.pull_request.number}}
         body: |
           ## Frontend Test Coverage Report
           ```
           ${{ needs.unit-tests-frontend.outputs.coverage }}
           ```
  api-tests:
    needs: [unit-tests-backend, unit-tests-frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reporsitory
        uses: actions/checkout@v4

      - name: Launch application
        run: |
          docker compose up --build -d
          npx wait-port http://localhost:8080/api/health -t 30000

      - name: Run API tests
        working-directory: ./tests-api
        run: |
          npm ci
          npx playwright test

        


        
    
